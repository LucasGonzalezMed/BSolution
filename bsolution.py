# -*- coding: utf-8 -*-
"""BSolution.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ml8owY2tsMvIlVcYmgJarT3qxFLLrEYK
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from tkinter import *
import tkinter as tk
import yfinance as yf

from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Dropout,GRU

def redn():
#Cargar los datos
  
  compania = entryb.get()
  ticker = yf.Ticker(compania)
  hist = ticker.history(start = '2012-1-1', end='2022-1-1')

#Preparar los datos
  scaler = MinMaxScaler(feature_range=(0,1))
  scaled_data = scaler.fit_transform(hist['Close'].values.reshape(-1,1))

  prediction_days = 60

  x_train = []
  y_train = []

  for x in range(prediction_days,len(scaled_data)):
    x_train.append(scaled_data[x-prediction_days:x,0])
    y_train.append(scaled_data[x,0])

  x_train,y_train = np.array(x_train),np.array(y_train)
  x_train = np.reshape(x_train,(x_train.shape[0],x_train.shape[1],1))

  x_train.shape

#Contruir el modelo
  modelo = Sequential()

  modelo.add(GRU(units=50,return_sequences = True, input_shape=(x_train.shape[1],1)))
  modelo.add(Dropout(0.2))
  modelo.add(GRU(units=50,return_sequences = True))
  modelo.add(Dropout(0.2))
  modelo.add(GRU(units=50))
  modelo.add(Dropout(0.1))
  modelo.add(Dense(units=1))

  modelo.compile(optimizer='adam', loss='mean_squared_error')

  modelo.fit(x_train,y_train,epochs=25,batch_size=32)

#Cargar los datos del test
  hist_test = ticker.history(start = '2022-1-1', end='2023-1-1')
  #Datos reales
  actual_prices = hist_test["Close"].values

  total_dataset = pd.concat((hist['Close'],hist_test['Close']),axis=0)
  modelo_inputs = total_dataset[len(total_dataset)-len(hist_test)-prediction_days:].values
  modelo_inputs = scaler.transform(modelo_inputs.reshape(-1,1))

  x_test = []

  for x in range(prediction_days,len(modelo_inputs)):
    x_test.append(modelo_inputs[x-prediction_days:x,0])

  x_test = np.array(x_test)
  x_test = np.reshape(x_test,(x_test.shape[0],x_test.shape[1],1))

  predicted_prices = modelo.predict(x_test)
  #Vuelvo a transformar los datos para  volver a obtener los precios
  predicted_prices = scaler.inverse_transform(predicted_prices)

  plt.plot(actual_prices,color="black",label=f"Precios reales de {compania} ")
  plt.plot(predicted_prices,color="green",label=f"Precios predecidos de {compania} ")
  plt.xlabel('Tiempo(dias)')
  plt.ylabel('Valor($USD)')
  plt.legend()
  

  rentability = 1
  for i in range(1,len(actual_prices)):
    if predicted_prices[i] > actual_prices[i-1]:
      rentability*= actual_prices[i]/actual_prices[i-1]

  print((rentability-1)*100,"%")
  #ventana.withdraw()
  plt.show()
  #ventana.destroy()
  

  def textentry():
    short=entryb.get()
    print (short)
    

if __name__ == "__main__":
  ventana = Tk()
  ventana.config(bg='white')
  ventana.geometry("600x350")
  imgInterfaz = PhotoImage(file ='fondo2.png')
  lblInterfaz = Label(ventana, image=imgInterfaz)
  lblInterfaz.place(x=0, y=0, width=1000, height=563)
  logo = PhotoImage(file ='logo.png')
  logolbl=Label(ventana, image= logo, bg='White',height=130, width=130).pack()
  Labelwelcome=tk.Label(ventana, text="Bienvenido a Bsolution", fg="green", justify="center", font="Helvetica 20").pack()
  Labelindication=tk.Label(ventana, text="Escribe el nombre de la acci√≥n", fg="green", justify="center", font="Helvetica 16").pack()
  entryb = tk.Entry(ventana, font="Helvetica 20")
  boton1=tk.Button(ventana, text= "Buscar", command = lambda: redn(), activebackground='lightgreen', bg='green', font=('Arial', 12,'bold'))
  entryb.pack()
  boton1.pack()
  ventana.wm_title("Bsolution")
  #ventana.overrideredirect(1)
  ventana.resizable(0,0)
  ventana.mainloop()
